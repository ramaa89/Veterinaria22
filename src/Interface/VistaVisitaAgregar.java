/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Interface.ComboBoxItems.ComboBoxMascotaItems;
import Interface.ComboBoxItems.ComboBoxTratamientoItems;
import clasesdata.Conexion;
import clasesdata.VisitaDeAtencionData;
import clasesprincipales.VisitaDeAtencion;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.Window;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;

/**
 *
 * @author MrLyoto
 */
public class VistaVisitaAgregar extends javax.swing.JPanel {

    private Connection con;
    ArrayList<ComboBoxMascotaItems> listOfMascotas = new ArrayList<>();
    ArrayList<ComboBoxTratamientoItems> listOfTratamientos = new ArrayList<>();

    public VistaVisitaAgregar() {

        con = Conexion.getConexion();
        initComponents();
        loadComboBoxes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxMascota = new javax.swing.JComboBox<>();
        jComboBoxTratamiento = new javax.swing.JComboBox<>();
        jButtonAgregar = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Agregar nueva visita"));

        jLabel1.setText("Nombre de la mascota:");

        jLabel2.setText("Nombre del tratamiento:");

        jComboBoxMascota.setToolTipText("");
        jComboBoxMascota.setAutoscrolls(true);
        jComboBoxMascota.setMinimumSize(new java.awt.Dimension(200, 20));
        jComboBoxMascota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxMascotaActionPerformed(evt);
            }
        });

        jComboBoxTratamiento.setAutoscrolls(true);
        jComboBoxTratamiento.setMinimumSize(new java.awt.Dimension(200, 20));

        jButtonAgregar.setText("OK");
        jButtonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBoxMascota, 0, 200, Short.MAX_VALUE)
                    .addComponent(jComboBoxTratamiento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addComponent(jButtonAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jComboBoxMascota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jComboBoxTratamiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarActionPerformed

        int idMascota = listOfMascotas.stream().filter((ComboBoxMascotaItems mascota) -> {
            return mascota.toString().equals(jComboBoxMascota.getSelectedItem());
        }).mapToInt(item -> item.getId()).sum();

        int idTratamiento = listOfTratamientos.stream().filter((trat) -> {
            return trat.toString().equals(jComboBoxTratamiento.getSelectedItem());
        }).mapToInt(item -> item.getId()).sum();

        double precio = listOfTratamientos.stream().filter((trat) -> {
            return trat.toString().equals(jComboBoxTratamiento.getSelectedItem());
        }).mapToDouble(item -> item.getPrecio()).sum();

        Date fecha = new Date();

        VisitaDeAtencion visita = new VisitaDeAtencion(idMascota, idTratamiento, fecha, precio);

        VisitaDeAtencionData visitaData = new VisitaDeAtencionData();
        visitaData.agregarVisita(visita);
        obtenerFramePadre().dispose();

    }//GEN-LAST:event_jButtonAgregarActionPerformed

    private void jComboBoxMascotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxMascotaActionPerformed
        String id = (String) jComboBoxMascota.getSelectedItem();
        System.out.println(id.replaceAll("\\D", ""));
    }//GEN-LAST:event_jComboBoxMascotaActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAgregar;
    private javax.swing.JComboBox<String> jComboBoxMascota;
    private javax.swing.JComboBox<String> jComboBoxTratamiento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

    private void loadComboBoxes() {
        //String sqlmascotas = "SELECT id_masc, alias, c.nombre_apellido from mascota join cliente c on c.dni_cliente = dni_cliente1;";
        //String sqltrar = "SELECT id_tratamiento, nombre_trat, precio from tratamiento";
        String sqlmascotas = "SELECT id_masc, alias, c.nombre_apellido from mascota join cliente c on c.dni_cliente = dnicliente1;";
        String sqltrar = "SELECT idtratamiento, nombretrat, precio from tratamiento";

        try (PreparedStatement stmMascotas = con.prepareStatement(sqlmascotas); PreparedStatement stmTrat = con.prepareStatement(sqltrar)) {

            ResultSet rs = stmMascotas.executeQuery();
            while (rs.next()) {
                listOfMascotas.add(new ComboBoxMascotaItems(rs.getInt(1), rs.getString(2), rs.getString(3)));
            }

            rs = stmTrat.executeQuery();
            while (rs.next()) {
                listOfTratamientos.add(new ComboBoxTratamientoItems(rs.getInt(1), rs.getString(2), rs.getDouble(3)));
            }
        } catch (Exception ex) {
            System.out.println("*******************************************************");
            System.out.println("Error al cargar combos");
            System.out.println(ex);
            System.out.println("Error en: " + ex.getStackTrace()[0].getClassName() + " ---> " + ex.getStackTrace()[0].getMethodName() + " || Line: " + ex.getStackTrace()[0].getLineNumber());
            System.out.println("*******************************************************");
        }

        for (ComboBoxMascotaItems item : listOfMascotas) {
            jComboBoxMascota.addItem(item.toString());
        }

        for (ComboBoxTratamientoItems item : listOfTratamientos) {
            jComboBoxTratamiento.addItem(item.toString());
        }

    }

    private Window obtenerFramePadre() {
        Container p = getParent();
        Container temp = null;

        while (p != null) {
            p = p.getParent();
            if (p != null) {
                temp = p;
            }
        }
        return (Window) temp;
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Container p = getParent();
        Container temp = null;
        Window def = null;

        while (p != null) {
            p = p.getParent();
            if (p != null) {
                temp = p;
            }
        }
        def = (Window) temp;

        def.addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {

            }

            @Override
            public void windowClosing(WindowEvent e) {
                
                    Conexion.close();
                
            }

            @Override
            public void windowClosed(WindowEvent e) {

            }

            @Override
            public void windowIconified(WindowEvent e) {

            }

            @Override
            public void windowDeiconified(WindowEvent e) {

            }

            @Override
            public void windowActivated(WindowEvent e) {

            }

            @Override
            public void windowDeactivated(WindowEvent e) {

            }
        });

    }

}